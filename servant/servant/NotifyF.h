// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.21.
// **********************************************************************

#ifndef __NOTIFYF_H_
#define __NOTIFYF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    enum NOTIFYLEVEL
    {
        NOTIFYNORMAL,
        NOTIFYWARN,
        NOTIFYERROR,
    };
    inline string etos(const NOTIFYLEVEL & e)
    {
        switch(e)
        {
            case NOTIFYNORMAL: return "NOTIFYNORMAL";
            case NOTIFYWARN: return "NOTIFYWARN";
            case NOTIFYERROR: return "NOTIFYERROR";
            default: return "";
        }
    }
    inline int stoe(const string & s, NOTIFYLEVEL & e)
    {
        if(s == "NOTIFYNORMAL")  { e=NOTIFYNORMAL; return 0;}
        if(s == "NOTIFYWARN")  { e=NOTIFYWARN; return 0;}
        if(s == "NOTIFYERROR")  { e=NOTIFYERROR; return 0;}

        return -1;
    }

    enum ReportType
    {
        REPORT,
        NOTIFY,
    };
    inline string etos(const ReportType & e)
    {
        switch(e)
        {
            case REPORT: return "REPORT";
            case NOTIFY: return "NOTIFY";
            default: return "";
        }
    }
    inline int stoe(const string & s, ReportType & e)
    {
        if(s == "REPORT")  { e=REPORT; return 0;}
        if(s == "NOTIFY")  { e=NOTIFY; return 0;}

        return -1;
    }

    struct ReportInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.ReportInfo";
        }
        static string MD5()
        {
            return "528b46e2f0695f77b1d9de7c64649bd1";
        }
        ReportInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            eType = tars::REPORT;
            sApp = "";
            sSet = "";
            sContainer = "";
            sServer = "";
            sMessage = "";
            sThreadId = "";
            eLevel = tars::NOTIFYNORMAL;
            sNodeName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write((tars::Int32)eType, 1);
            _os.write(sApp, 2);
            _os.write(sSet, 3);
            _os.write(sContainer, 4);
            _os.write(sServer, 5);
            _os.write(sMessage, 6);
            if (sThreadId != "")
            {
                _os.write(sThreadId, 7);
            }
            _os.write((tars::Int32)eLevel, 8);
            if (sNodeName != "")
            {
                _os.write(sNodeName, 9);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            tars::Int32 eTemp1 = tars::REPORT;
            _is.read(eTemp1, 1, true);
            eType = (tars::ReportType)eTemp1;
            _is.read(sApp, 2, true);
            _is.read(sSet, 3, true);
            _is.read(sContainer, 4, true);
            _is.read(sServer, 5, true);
            _is.read(sMessage, 6, true);
            _is.read(sThreadId, 7, false);
            tars::Int32 eTemp8 = tars::NOTIFYNORMAL;
            _is.read(eTemp8, 8, false);
            eLevel = (tars::NOTIFYLEVEL)eTemp8;
            _is.read(sNodeName, 9, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["eType"] = tars::JsonOutput::writeJson((tars::Int32)eType);
            p->value["sApp"] = tars::JsonOutput::writeJson(sApp);
            p->value["sSet"] = tars::JsonOutput::writeJson(sSet);
            p->value["sContainer"] = tars::JsonOutput::writeJson(sContainer);
            p->value["sServer"] = tars::JsonOutput::writeJson(sServer);
            p->value["sMessage"] = tars::JsonOutput::writeJson(sMessage);
            p->value["sThreadId"] = tars::JsonOutput::writeJson(sThreadId);
            p->value["eLevel"] = tars::JsonOutput::writeJson((tars::Int32)eLevel);
            p->value["sNodeName"] = tars::JsonOutput::writeJson(sNodeName);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(eType,pObj->value["eType"], true);
            tars::JsonInput::readJson(sApp,pObj->value["sApp"], true);
            tars::JsonInput::readJson(sSet,pObj->value["sSet"], true);
            tars::JsonInput::readJson(sContainer,pObj->value["sContainer"], true);
            tars::JsonInput::readJson(sServer,pObj->value["sServer"], true);
            tars::JsonInput::readJson(sMessage,pObj->value["sMessage"], true);
            tars::JsonInput::readJson(sThreadId,pObj->value["sThreadId"], false);
            tars::JsonInput::readJson(eLevel,pObj->value["eLevel"], false);
            tars::JsonInput::readJson(sNodeName,pObj->value["sNodeName"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display((tars::Int32)eType,"eType");
            _ds.display(sApp,"sApp");
            _ds.display(sSet,"sSet");
            _ds.display(sContainer,"sContainer");
            _ds.display(sServer,"sServer");
            _ds.display(sMessage,"sMessage");
            _ds.display(sThreadId,"sThreadId");
            _ds.display((tars::Int32)eLevel,"eLevel");
            _ds.display(sNodeName,"sNodeName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple((tars::Int32)eType, true);
            _ds.displaySimple(sApp, true);
            _ds.displaySimple(sSet, true);
            _ds.displaySimple(sContainer, true);
            _ds.displaySimple(sServer, true);
            _ds.displaySimple(sMessage, true);
            _ds.displaySimple(sThreadId, true);
            _ds.displaySimple((tars::Int32)eLevel, true);
            _ds.displaySimple(sNodeName, false);
            return _os;
        }
    public:
        tars::ReportType eType;
        std::string sApp;
        std::string sSet;
        std::string sContainer;
        std::string sServer;
        std::string sMessage;
        std::string sThreadId;
        tars::NOTIFYLEVEL eLevel;
        std::string sNodeName;
    };
    inline bool operator==(const ReportInfo&l, const ReportInfo&r)
    {
        return l.eType == r.eType && l.sApp == r.sApp && l.sSet == r.sSet && l.sContainer == r.sContainer && l.sServer == r.sServer && l.sMessage == r.sMessage && l.sThreadId == r.sThreadId && l.eLevel == r.eLevel && l.sNodeName == r.sNodeName;
    }
    inline bool operator!=(const ReportInfo&l, const ReportInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ReportInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ReportInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class NotifyPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~NotifyPrxCallback(){}
        virtual void callback_reportNotifyInfo()
        { throw std::runtime_error("callback_reportNotifyInfo() override incorrect."); }
        virtual void callback_reportNotifyInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_reportNotifyInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Notify_all[]=
            {
                "reportNotifyInfo"
            };
            auto it = _msg_->response->status.find("TARS_FUNC");
            pair<string*, string*> r = equal_range(__Notify_all, __Notify_all+1, (it==_msg_->response->status.end())?_msg_->request.sFuncName:it->second);
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Notify_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNotifyInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "reportNotifyInfo", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_reportNotifyInfo();

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<NotifyPrxCallback> NotifyPrxCallbackPtr;

    //callback of promise async proxy for client
    class NotifyPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~NotifyPrxCallbackPromise(){}
    public:
        struct PromisereportNotifyInfo: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< NotifyPrxCallbackPromise::PromisereportNotifyInfo > PromisereportNotifyInfoPtr;

        NotifyPrxCallbackPromise(const tars::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > &promise)
        : _promise_reportNotifyInfo(promise)
        {}
        
        virtual void callback_reportNotifyInfo(const NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr &ptr)
        {
            _promise_reportNotifyInfo.setValue(ptr);
        }
        virtual void callback_reportNotifyInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:reportNotifyInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportNotifyInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > _promise_reportNotifyInfo;

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Notify_all[]=
            {
                "reportNotifyInfo"
            };

            pair<string*, string*> r = equal_range(__Notify_all, __Notify_all+1, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Notify_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNotifyInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr ptr (new NotifyPrxCallbackPromise::PromisereportNotifyInfo());

                    try
                    {
                    }
                    catch(std::exception &ex)
                    {
                        callback_reportNotifyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportNotifyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_reportNotifyInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<NotifyPrxCallbackPromise> NotifyPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class NotifyCoroPrxCallback: public NotifyPrxCallback
    {
    public:
        virtual ~NotifyCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Notify_all[]=
            {
                "reportNotifyInfo"
            };

            pair<string*, string*> r = equal_range(__Notify_all, __Notify_all+1, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Notify_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportNotifyInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        setResponseContext(_msg_->response->context);

                        callback_reportNotifyInfo();

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportNotifyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportNotifyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<NotifyCoroPrxCallback> NotifyCoroPrxCallbackPtr;

    /* proxy for client */
    class NotifyProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        void reportNotifyInfo(const tars::ReportInfo & info,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["info"] = tars::JsonOutput::writeJson(info);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "reportNotifyInfo", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"reportNotifyInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "reportNotifyInfo", 0, _trace_param_, "");
            }

        }

        void async_reportNotifyInfo(NotifyPrxCallbackPtr callback,const tars::ReportInfo &info,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["info"] = tars::JsonOutput::writeJson(info);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "reportNotifyInfo", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"reportNotifyInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > promise_async_reportNotifyInfo(const tars::ReportInfo &info,const map<string, string>& context)
        {
            tars::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > promise;
            NotifyPrxCallbackPromisePtr callback (new NotifyPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportNotifyInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportNotifyInfo(NotifyCoroPrxCallbackPtr callback,const tars::ReportInfo &info,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportNotifyInfo", _os, context, _mStatus, callback, true);
        }

        NotifyProxy* tars_hash(size_t key)
        {
            return (NotifyProxy*)ServantProxy::tars_hash(key);
        }

        NotifyProxy* tars_consistent_hash(size_t key)
        {
            return (NotifyProxy*)ServantProxy::tars_consistent_hash(key);
        }

        NotifyProxy* tars_open_trace(bool traceParam = false)
        {
            return (NotifyProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        NotifyProxy* tars_set_timeout(int msecond)
        {
            return (NotifyProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "NotifyProxy"; }
    };
    typedef tars::TC_AutoPtr<NotifyProxy> NotifyPrx;

    /* servant for server */
    class Notify : public tars::Servant
    {
    public:
        virtual ~Notify(){}
        virtual void reportNotifyInfo(const tars::ReportInfo & info,tars::TarsCurrentPtr _current_) = 0;
        virtual void reportNotifyInfo(tars::ReportInfo && info,tars::TarsCurrentPtr _current_) 
        { return reportNotifyInfo(info, _current_); }
        static void async_response_reportNotifyInfo(tars::TarsCurrentPtr _current_)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "reportNotifyInfo", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_reportNotifyInfo(tars::CurrentPtr _current_, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"reportNotifyInfo", _os, _context);
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Notify_all[]=
            {
                "reportNotifyInfo"
            };

            pair<string*, string*> r = equal_range(__tars__Notify_all, __tars__Notify_all+1, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Notify_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ReportInfo info;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("info", info);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(info, _jsonPtr->value["info"], true);
                    }
                    else
                    {
                        _is.read(info, 1, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["info"] = tars::JsonOutput::writeJson(info);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "reportNotifyInfo", 0, _trace_param_, "");
                    }

                    reportNotifyInfo(std::move(info), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "reportNotifyInfo", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
