// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.21.
// **********************************************************************

#ifndef __QUERYF_H_
#define __QUERYF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "EndpointF.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct GetMasterSlaveLock : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.GetMasterSlaveLock";
        }
        static string MD5()
        {
            return "24813e8acba8f6f9cdfc2039ee635eeb";
        }
        GetMasterSlaveLock()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            application = "";
            server_name = "";
            node_name = "";
            isMaster = false;
            lastErr = false;
            timeout = 0;
            bakType = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (application != "")
            {
                _os.write(application, 0);
            }
            if (server_name != "")
            {
                _os.write(server_name, 1);
            }
            if (node_name != "")
            {
                _os.write(node_name, 2);
            }
            //bool类型, 都传输, 为了兼容调整bool缺省值的带来的问题
            {
                _os.write(isMaster, 3);
            }
            //bool类型, 都传输, 为了兼容调整bool缺省值的带来的问题
            {
                _os.write(lastErr, 4);
            }
            if (timeout != 0)
            {
                _os.write(timeout, 5);
            }
            if (bakType != 0)
            {
                _os.write(bakType, 6);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(application, 0, false);
            _is.read(server_name, 1, false);
            _is.read(node_name, 2, false);
            _is.read(isMaster, 3, false);
            _is.read(lastErr, 4, false);
            _is.read(timeout, 5, false);
            _is.read(bakType, 6, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["application"] = tars::JsonOutput::writeJson(application);
            p->value["server_name"] = tars::JsonOutput::writeJson(server_name);
            p->value["node_name"] = tars::JsonOutput::writeJson(node_name);
            p->value["isMaster"] = tars::JsonOutput::writeJson(isMaster);
            p->value["lastErr"] = tars::JsonOutput::writeJson(lastErr);
            p->value["timeout"] = tars::JsonOutput::writeJson(timeout);
            p->value["bakType"] = tars::JsonOutput::writeJson(bakType);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(application,pObj->value["application"], false);
            tars::JsonInput::readJson(server_name,pObj->value["server_name"], false);
            tars::JsonInput::readJson(node_name,pObj->value["node_name"], false);
            tars::JsonInput::readJson(isMaster,pObj->value["isMaster"], false);
            tars::JsonInput::readJson(lastErr,pObj->value["lastErr"], false);
            tars::JsonInput::readJson(timeout,pObj->value["timeout"], false);
            tars::JsonInput::readJson(bakType,pObj->value["bakType"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(application,"application");
            _ds.display(server_name,"server_name");
            _ds.display(node_name,"node_name");
            _ds.display(isMaster,"isMaster");
            _ds.display(lastErr,"lastErr");
            _ds.display(timeout,"timeout");
            _ds.display(bakType,"bakType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(application, true);
            _ds.displaySimple(server_name, true);
            _ds.displaySimple(node_name, true);
            _ds.displaySimple(isMaster, true);
            _ds.displaySimple(lastErr, true);
            _ds.displaySimple(timeout, true);
            _ds.displaySimple(bakType, false);
            return _os;
        }
    public:
        std::string application;
        std::string server_name;
        std::string node_name;
        tars::Bool isMaster;
        tars::Bool lastErr;
        tars::Int32 timeout;
        tars::Int32 bakType;
    };
    inline bool operator==(const GetMasterSlaveLock&l, const GetMasterSlaveLock&r)
    {
        return l.application == r.application && l.server_name == r.server_name && l.node_name == r.node_name && l.isMaster == r.isMaster && l.lastErr == r.lastErr && l.timeout == r.timeout && l.bakType == r.bakType;
    }
    inline bool operator!=(const GetMasterSlaveLock&l, const GetMasterSlaveLock&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetMasterSlaveLock&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetMasterSlaveLock&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class QueryFPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallback(){}
        virtual void callback_findObjectById(const vector<tars::EndpointF>& ret)
        { throw std::runtime_error("callback_findObjectById() override incorrect."); }
        virtual void callback_findObjectById_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById_exception() override incorrect."); }
        virtual void callback_findObjectById(vector<tars::EndpointF>&& ret)
        { callback_findObjectById(ret); }

        virtual void callback_findObjectById4All(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4All() override incorrect."); }
        virtual void callback_findObjectById4All_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4All_exception() override incorrect."); }
        virtual void callback_findObjectById4All(tars::Int32 ret, vector<tars::EndpointF>&&  activeEp, vector<tars::EndpointF>&&  inactiveEp)
        { callback_findObjectById4All(ret, activeEp, inactiveEp); }

        virtual void callback_findObjectById4Any(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4Any() override incorrect."); }
        virtual void callback_findObjectById4Any_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4Any_exception() override incorrect."); }
        virtual void callback_findObjectById4Any(tars::Int32 ret, vector<tars::EndpointF>&&  activeEp, vector<tars::EndpointF>&&  inactiveEp)
        { callback_findObjectById4Any(ret, activeEp, inactiveEp); }

        virtual void callback_findObjectByIdInSameGroup(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup() override incorrect."); }
        virtual void callback_findObjectByIdInSameGroup_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup_exception() override incorrect."); }
        virtual void callback_findObjectByIdInSameGroup(tars::Int32 ret, vector<tars::EndpointF>&&  activeEp, vector<tars::EndpointF>&&  inactiveEp)
        { callback_findObjectByIdInSameGroup(ret, activeEp, inactiveEp); }

        virtual void callback_findObjectByIdInSameSet(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameSet() override incorrect."); }
        virtual void callback_findObjectByIdInSameSet_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameSet_exception() override incorrect."); }
        virtual void callback_findObjectByIdInSameSet(tars::Int32 ret, vector<tars::EndpointF>&&  activeEp, vector<tars::EndpointF>&&  inactiveEp)
        { callback_findObjectByIdInSameSet(ret, activeEp, inactiveEp); }

        virtual void callback_findObjectByIdInSameStation(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameStation() override incorrect."); }
        virtual void callback_findObjectByIdInSameStation_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameStation_exception() override incorrect."); }
        virtual void callback_findObjectByIdInSameStation(tars::Int32 ret, vector<tars::EndpointF>&&  activeEp, vector<tars::EndpointF>&&  inactiveEp)
        { callback_findObjectByIdInSameStation(ret, activeEp, inactiveEp); }

        virtual void callback_findObjectNodeName(tars::Int32 ret,  const vector<std::string>& nodeName)
        { throw std::runtime_error("callback_findObjectNodeName() override incorrect."); }
        virtual void callback_findObjectNodeName_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectNodeName_exception() override incorrect."); }
        virtual void callback_findObjectNodeName(tars::Int32 ret, vector<std::string>&&  nodeName)
        { callback_findObjectNodeName(ret, nodeName); }

        virtual void callback_getLocker(tars::Int32 ret)
        { throw std::runtime_error("callback_getLocker() override incorrect."); }
        virtual void callback_getLocker_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getLocker_exception() override incorrect."); }

        virtual void callback_registerChange(tars::Int32 ret)
        { throw std::runtime_error("callback_registerChange() override incorrect."); }
        virtual void callback_registerChange_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerChange_exception() override incorrect."); }

        virtual void callback_registerQuery(tars::Int32 ret)
        { throw std::runtime_error("callback_registerQuery() override incorrect."); }
        virtual void callback_registerQuery_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerQuery_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findObjectNodeName",
                "getLocker",
                "registerChange",
                "registerQuery"
            };
            auto it = _msg_->response->status.find("TARS_FUNC");
            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+10, (it==_msg_->response->status.end())?_msg_->request.sFuncName:it->second);
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    vector<tars::EndpointF> _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectById", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectById(std::move(_ret));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectById4All", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectById4All(_ret, std::move(activeEp), std::move(inactiveEp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectById4Any", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectById4Any(_ret, std::move(activeEp), std::move(inactiveEp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectByIdInSameGroup(_ret, std::move(activeEp), std::move(inactiveEp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectByIdInSameSet", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectByIdInSameSet(_ret, std::move(activeEp), std::move(inactiveEp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectByIdInSameStation", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectByIdInSameStation(_ret, std::move(activeEp), std::move(inactiveEp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectNodeName_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> nodeName;
                    _is.read(nodeName, 2, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "findObjectNodeName", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_findObjectNodeName(_ret, std::move(nodeName));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getLocker_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "getLocker", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_getLocker(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerChange_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "registerChange", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_registerChange(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerQuery_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "registerQuery", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_registerQuery(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryFPrxCallback> QueryFPrxCallbackPtr;

    //callback of promise async proxy for client
    class QueryFPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallbackPromise(){}
    public:
        struct PromisefindObjectById: virtual public TC_HandleBase
        {
        public:
            vector<tars::EndpointF> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById > PromisefindObjectByIdPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > &promise)
        : _promise_findObjectById(promise)
        {}
        
        virtual void callback_findObjectById(const QueryFPrxCallbackPromise::PromisefindObjectByIdPtr &ptr)
        {
            _promise_findObjectById.setValue(ptr);
        }
        virtual void callback_findObjectById_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > _promise_findObjectById;

    public:
        struct PromisefindObjectById4All: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::EndpointF> activeEp;
            vector<tars::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4All > PromisefindObjectById4AllPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > &promise)
        : _promise_findObjectById4All(promise)
        {}
        
        virtual void callback_findObjectById4All(const QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr &ptr)
        {
            _promise_findObjectById4All.setValue(ptr);
        }
        virtual void callback_findObjectById4All_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4All_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4All.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > _promise_findObjectById4All;

    public:
        struct PromisefindObjectById4Any: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::EndpointF> activeEp;
            vector<tars::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4Any > PromisefindObjectById4AnyPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > &promise)
        : _promise_findObjectById4Any(promise)
        {}
        
        virtual void callback_findObjectById4Any(const QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr &ptr)
        {
            _promise_findObjectById4Any.setValue(ptr);
        }
        virtual void callback_findObjectById4Any_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4Any_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4Any.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > _promise_findObjectById4Any;

    public:
        struct PromisefindObjectByIdInSameGroup: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::EndpointF> activeEp;
            vector<tars::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup > PromisefindObjectByIdInSameGroupPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > &promise)
        : _promise_findObjectByIdInSameGroup(promise)
        {}
        
        virtual void callback_findObjectByIdInSameGroup(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr &ptr)
        {
            _promise_findObjectByIdInSameGroup.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameGroup_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameGroup_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameGroup.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > _promise_findObjectByIdInSameGroup;

    public:
        struct PromisefindObjectByIdInSameSet: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::EndpointF> activeEp;
            vector<tars::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet > PromisefindObjectByIdInSameSetPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > &promise)
        : _promise_findObjectByIdInSameSet(promise)
        {}
        
        virtual void callback_findObjectByIdInSameSet(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr &ptr)
        {
            _promise_findObjectByIdInSameSet.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameSet_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameSet_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameSet.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > _promise_findObjectByIdInSameSet;

    public:
        struct PromisefindObjectByIdInSameStation: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<tars::EndpointF> activeEp;
            vector<tars::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation > PromisefindObjectByIdInSameStationPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > &promise)
        : _promise_findObjectByIdInSameStation(promise)
        {}
        
        virtual void callback_findObjectByIdInSameStation(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr &ptr)
        {
            _promise_findObjectByIdInSameStation.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameStation_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameStation_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameStation.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > _promise_findObjectByIdInSameStation;

    public:
        struct PromisefindObjectNodeName: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<std::string> nodeName;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectNodeName > PromisefindObjectNodeNamePtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr > &promise)
        : _promise_findObjectNodeName(promise)
        {}
        
        virtual void callback_findObjectNodeName(const QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr &ptr)
        {
            _promise_findObjectNodeName.setValue(ptr);
        }
        virtual void callback_findObjectNodeName_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectNodeName_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectNodeName.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr > _promise_findObjectNodeName;

    public:
        struct PromisegetLocker: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisegetLocker > PromisegetLockerPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromisegetLockerPtr > &promise)
        : _promise_getLocker(promise)
        {}
        
        virtual void callback_getLocker(const QueryFPrxCallbackPromise::PromisegetLockerPtr &ptr)
        {
            _promise_getLocker.setValue(ptr);
        }
        virtual void callback_getLocker_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getLocker_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getLocker.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromisegetLockerPtr > _promise_getLocker;

    public:
        struct PromiseregisterChange: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromiseregisterChange > PromiseregisterChangePtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromiseregisterChangePtr > &promise)
        : _promise_registerChange(promise)
        {}
        
        virtual void callback_registerChange(const QueryFPrxCallbackPromise::PromiseregisterChangePtr &ptr)
        {
            _promise_registerChange.setValue(ptr);
        }
        virtual void callback_registerChange_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerChange_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerChange.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromiseregisterChangePtr > _promise_registerChange;

    public:
        struct PromiseregisterQuery: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromiseregisterQuery > PromiseregisterQueryPtr;

        QueryFPrxCallbackPromise(const tars::Promise< QueryFPrxCallbackPromise::PromiseregisterQueryPtr > &promise)
        : _promise_registerQuery(promise)
        {}
        
        virtual void callback_registerQuery(const QueryFPrxCallbackPromise::PromiseregisterQueryPtr &ptr)
        {
            _promise_registerQuery.setValue(ptr);
        }
        virtual void callback_registerQuery_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerQuery_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerQuery.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< QueryFPrxCallbackPromise::PromiseregisterQueryPtr > _promise_registerQuery;

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findObjectNodeName",
                "getLocker",
                "registerChange",
                "registerQuery"
            };

            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+10, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectById());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectById(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectById4All());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectById4All(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectById4Any());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectById4Any(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectByIdInSameGroup(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 3, true);
                        _is.read(ptr->inactiveEp, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectByIdInSameSet(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 3, true);
                        _is.read(ptr->inactiveEp, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectByIdInSameStation(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectNodeName_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr ptr (new QueryFPrxCallbackPromise::PromisefindObjectNodeName());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->nodeName, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectNodeName_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectNodeName_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_findObjectNodeName(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getLocker_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromisegetLockerPtr ptr (new QueryFPrxCallbackPromise::PromisegetLocker());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getLocker_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getLocker_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_getLocker(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerChange_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromiseregisterChangePtr ptr (new QueryFPrxCallbackPromise::PromiseregisterChange());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_registerChange(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerQuery_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    QueryFPrxCallbackPromise::PromiseregisterQueryPtr ptr (new QueryFPrxCallbackPromise::PromiseregisterQuery());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerQuery_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerQuery_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_registerQuery(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryFPrxCallbackPromise> QueryFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class QueryFCoroPrxCallback: public QueryFPrxCallback
    {
    public:
        virtual ~QueryFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findObjectNodeName",
                "getLocker",
                "registerChange",
                "registerQuery"
            };

            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+10, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        vector<tars::EndpointF> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_findObjectById(std::move(_ret));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectById4All(_ret, std::move(activeEp), std::move(inactiveEp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectById4Any(_ret, std::move(activeEp), std::move(inactiveEp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectByIdInSameGroup(_ret, std::move(activeEp), std::move(inactiveEp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectByIdInSameSet(_ret, std::move(activeEp), std::move(inactiveEp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectByIdInSameStation(_ret, std::move(activeEp), std::move(inactiveEp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectNodeName_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> nodeName;
                        _is.read(nodeName, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_findObjectNodeName(_ret, std::move(nodeName));

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectNodeName_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectNodeName_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getLocker_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_getLocker(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getLocker_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getLocker_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerChange_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_registerChange(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerQuery_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_registerQuery(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerQuery_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerQuery_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<QueryFCoroPrxCallback> QueryFCoroPrxCallbackPtr;

    /* proxy for client */
    class QueryFProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        vector<tars::EndpointF> findObjectById(const std::string & id,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            vector<tars::EndpointF> _ret;
            _is.read(_ret, 0, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectById", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise_async_findObjectById(const std::string &id,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4All(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById4All", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectById4All", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById4All", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise_async_findObjectById4All(const std::string &id,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById4All(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4Any(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById4Any", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectById4Any", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectById4Any", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise_async_findObjectById4Any(const std::string &id,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById4Any(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise_async_findObjectByIdInSameGroup(const std::string &id,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameGroup(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["setId"] = tars::JsonOutput::writeJson(setId);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameSet", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectByIdInSameSet", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["setId"] = tars::JsonOutput::writeJson(setId);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameSet", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise_async_findObjectByIdInSameSet(const std::string &id,const std::string &setId,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameSet(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["sStation"] = tars::JsonOutput::writeJson(sStation);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameStation", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectByIdInSameStation", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["sStation"] = tars::JsonOutput::writeJson(sStation);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectByIdInSameStation", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise_async_findObjectByIdInSameStation(const std::string &id,const std::string &sStation,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameStation(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectNodeName(const std::string & id,vector<std::string> &nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(nodeName, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectNodeName", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectNodeName", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(nodeName, 2, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "findObjectNodeName", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_findObjectNodeName(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "findObjectNodeName", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"findObjectNodeName", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr > promise_async_findObjectNodeName(const std::string &id,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisefindObjectNodeNamePtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectNodeName", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectNodeName(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectNodeName", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getLocker(const tars::GetMasterSlaveLock & req,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "getLocker", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getLocker", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "getLocker", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_getLocker(QueryFPrxCallbackPtr callback,const tars::GetMasterSlaveLock &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "getLocker", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"getLocker", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromisegetLockerPtr > promise_async_getLocker(const tars::GetMasterSlaveLock &req,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromisegetLockerPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getLocker", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getLocker(QueryFCoroPrxCallbackPtr callback,const tars::GetMasterSlaveLock &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getLocker", _os, context, _mStatus, callback, true);
        }

        tars::Int32 registerChange(const map<std::string, std::string> & timestamp,const std::string & name,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(timestamp, 1);
            _os.write(name, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["timestamp"] = tars::JsonOutput::writeJson(timestamp);
                    _p_->value["name"] = tars::JsonOutput::writeJson(name);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "registerChange", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"registerChange", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "registerChange", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_registerChange(QueryFPrxCallbackPtr callback,const map<std::string, std::string> &timestamp,const std::string &name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(timestamp, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["timestamp"] = tars::JsonOutput::writeJson(timestamp);
                    _p_->value["name"] = tars::JsonOutput::writeJson(name);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "registerChange", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"registerChange", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromiseregisterChangePtr > promise_async_registerChange(const map<std::string, std::string> &timestamp,const std::string &name,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromiseregisterChangePtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(timestamp, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerChange", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerChange(QueryFCoroPrxCallbackPtr callback,const map<std::string, std::string> &timestamp,const std::string &name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(timestamp, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerChange", _os, context, _mStatus, callback, true);
        }

        tars::Int32 registerQuery(const std::string & id,const std::string & name,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(name, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["name"] = tars::JsonOutput::writeJson(name);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "registerQuery", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"registerQuery", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "registerQuery", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_registerQuery(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["id"] = tars::JsonOutput::writeJson(id);
                    _p_->value["name"] = tars::JsonOutput::writeJson(name);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "registerQuery", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"registerQuery", _os, context, _mStatus, callback);
        }
        
        tars::Future< QueryFPrxCallbackPromise::PromiseregisterQueryPtr > promise_async_registerQuery(const std::string &id,const std::string &name,const map<string, string>& context)
        {
            tars::Promise< QueryFPrxCallbackPromise::PromiseregisterQueryPtr > promise;
            QueryFPrxCallbackPromisePtr callback (new QueryFPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerQuery", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerQuery(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(name, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerQuery", _os, context, _mStatus, callback, true);
        }

        QueryFProxy* tars_hash(size_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_hash(key);
        }

        QueryFProxy* tars_consistent_hash(size_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_consistent_hash(key);
        }

        QueryFProxy* tars_open_trace(bool traceParam = false)
        {
            return (QueryFProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        QueryFProxy* tars_set_timeout(int msecond)
        {
            return (QueryFProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "QueryFProxy"; }
    };
    typedef tars::TC_AutoPtr<QueryFProxy> QueryFPrx;

    /* servant for server */
    class QueryF : public tars::Servant
    {
    public:
        virtual ~QueryF(){}
        virtual vector<tars::EndpointF> findObjectById(const std::string & id,tars::TarsCurrentPtr _current_) = 0;
        virtual vector<tars::EndpointF> findObjectById(std::string && id,tars::TarsCurrentPtr _current_) 
        { return findObjectById(id, _current_); }
        static void async_response_findObjectById(tars::TarsCurrentPtr _current_, const vector<tars::EndpointF> &_ret)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectById", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectById(tars::CurrentPtr _current_, const vector<tars::EndpointF> &_ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectById", _os, _context);
            }
        }

        virtual tars::Int32 findObjectById4All(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectById4All(std::string && id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) 
        { return findObjectById4All(id, activeEp, inactiveEp, _current_); }
        static void async_response_findObjectById4All(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("activeEp", activeEp);
                _tarsAttr_.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectById4All", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectById4All(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectById4All", _os, _context);
            }
        }

        virtual tars::Int32 findObjectById4Any(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectById4Any(std::string && id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) 
        { return findObjectById4Any(id, activeEp, inactiveEp, _current_); }
        static void async_response_findObjectById4Any(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("activeEp", activeEp);
                _tarsAttr_.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectById4Any", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectById4Any(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectById4Any", _os, _context);
            }
        }

        virtual tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectByIdInSameGroup(std::string && id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) 
        { return findObjectByIdInSameGroup(id, activeEp, inactiveEp, _current_); }
        static void async_response_findObjectByIdInSameGroup(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("activeEp", activeEp);
                _tarsAttr_.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectByIdInSameGroup(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectByIdInSameGroup", _os, _context);
            }
        }

        virtual tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectByIdInSameSet(std::string && id,std::string && setId,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) 
        { return findObjectByIdInSameSet(id, setId, activeEp, inactiveEp, _current_); }
        static void async_response_findObjectByIdInSameSet(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("activeEp", activeEp);
                _tarsAttr_.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectByIdInSameSet", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectByIdInSameSet(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectByIdInSameSet", _os, _context);
            }
        }

        virtual tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectByIdInSameStation(std::string && id,std::string && sStation,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr _current_) 
        { return findObjectByIdInSameStation(id, sStation, activeEp, inactiveEp, _current_); }
        static void async_response_findObjectByIdInSameStation(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("activeEp", activeEp);
                _tarsAttr_.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                    _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectByIdInSameStation", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectByIdInSameStation(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectByIdInSameStation", _os, _context);
            }
        }

        virtual tars::Int32 findObjectNodeName(const std::string & id,vector<std::string> &nodeName,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 findObjectNodeName(std::string && id,vector<std::string> &nodeName,tars::TarsCurrentPtr _current_) 
        { return findObjectNodeName(id, nodeName, _current_); }
        static void async_response_findObjectNodeName(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &nodeName)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("nodeName", nodeName);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(nodeName, 2);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "findObjectNodeName", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_findObjectNodeName(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &nodeName, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(nodeName, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"findObjectNodeName", _os, _context);
            }
        }

        virtual tars::Int32 getLocker(const tars::GetMasterSlaveLock & req,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 getLocker(tars::GetMasterSlaveLock && req,tars::TarsCurrentPtr _current_) 
        { return getLocker(req, _current_); }
        static void async_response_getLocker(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "getLocker", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_getLocker(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"getLocker", _os, _context);
            }
        }

        virtual tars::Int32 registerChange(const map<std::string, std::string> & timestamp,const std::string & name,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 registerChange(map<std::string, std::string> && timestamp,std::string && name,tars::TarsCurrentPtr _current_) 
        { return registerChange(timestamp, name, _current_); }
        static void async_response_registerChange(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "registerChange", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_registerChange(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"registerChange", _os, _context);
            }
        }

        virtual tars::Int32 registerQuery(const std::string & id,const std::string & name,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 registerQuery(std::string && id,std::string && name,tars::TarsCurrentPtr _current_) 
        { return registerQuery(id, name, _current_); }
        static void async_response_registerQuery(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "registerQuery", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_registerQuery(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"registerQuery", _os, _context);
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findObjectNodeName",
                "getLocker",
                "registerChange",
                "registerQuery"
            };

            pair<string*, string*> r = equal_range(__tars__QueryF_all, __tars__QueryF_all+10, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__QueryF_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectById", 0, _trace_param_, "");
                    }

                    vector<tars::EndpointF> _ret = findObjectById(std::move(id), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectById", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.getByDefault("activeEp", activeEp, activeEp);
                        _tarsAttr_.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectById4All", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectById4All(std::move(id),activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("activeEp", activeEp);
                            _tarsAttr_.put("inactiveEp", inactiveEp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                                _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectById4All", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.getByDefault("activeEp", activeEp, activeEp);
                        _tarsAttr_.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectById4Any", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectById4Any(std::move(id),activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("activeEp", activeEp);
                            _tarsAttr_.put("inactiveEp", inactiveEp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                                _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectById4Any", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.getByDefault("activeEp", activeEp, activeEp);
                        _tarsAttr_.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectByIdInSameGroup(std::move(id),activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("activeEp", activeEp);
                            _tarsAttr_.put("inactiveEp", inactiveEp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                                _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectByIdInSameGroup", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string setId;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.get("setId", setId);
                        _tarsAttr_.getByDefault("activeEp", activeEp, activeEp);
                        _tarsAttr_.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(setId, _jsonPtr->value["setId"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(setId, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _p_->value["setId"] = tars::JsonOutput::writeJson(setId);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectByIdInSameSet", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectByIdInSameSet(std::move(id),std::move(setId),activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("activeEp", activeEp);
                            _tarsAttr_.put("inactiveEp", inactiveEp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                                _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectByIdInSameSet", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string sStation;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.get("sStation", sStation);
                        _tarsAttr_.getByDefault("activeEp", activeEp, activeEp);
                        _tarsAttr_.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(sStation, _jsonPtr->value["sStation"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(sStation, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _p_->value["sStation"] = tars::JsonOutput::writeJson(sStation);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectByIdInSameStation", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectByIdInSameStation(std::move(id),std::move(sStation),activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("activeEp", activeEp);
                            _tarsAttr_.put("inactiveEp", inactiveEp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                                _p_->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectByIdInSameStation", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<std::string> nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.getByDefault("nodeName", nodeName, nodeName);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(nodeName, 2, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "findObjectNodeName", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = findObjectNodeName(std::move(id),nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("nodeName", nodeName);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(nodeName, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["nodeName"] = tars::JsonOutput::writeJson(nodeName);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "findObjectNodeName", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::GetMasterSlaveLock req;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("req", req);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["req"] = tars::JsonOutput::writeJson(req);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "getLocker", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = getLocker(std::move(req), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "getLocker", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    map<std::string, std::string> timestamp;
                    std::string name;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("timestamp", timestamp);
                        _tarsAttr_.get("name", name);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(timestamp, _jsonPtr->value["timestamp"], true);
                        tars::JsonInput::readJson(name, _jsonPtr->value["name"], true);
                    }
                    else
                    {
                        _is.read(timestamp, 1, true);
                        _is.read(name, 2, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["timestamp"] = tars::JsonOutput::writeJson(timestamp);
                            _p_->value["name"] = tars::JsonOutput::writeJson(name);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "registerChange", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = registerChange(std::move(timestamp),std::move(name), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "registerChange", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string name;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("id", id);
                        _tarsAttr_.get("name", name);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(name, _jsonPtr->value["name"], true);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(name, 2, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["id"] = tars::JsonOutput::writeJson(id);
                            _p_->value["name"] = tars::JsonOutput::writeJson(name);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "registerQuery", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = registerQuery(std::move(id),std::move(name), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "registerQuery", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
