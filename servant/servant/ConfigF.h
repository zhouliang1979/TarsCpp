// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.21.
// **********************************************************************

#ifndef __CONFIGF_H_
#define __CONFIGF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct ConfigInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.ConfigInfo";
        }
        static string MD5()
        {
            return "fa53cbb9dfbff6a5a090cde6b1ed2089";
        }
        ConfigInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            filename = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(filename, 2);
            _os.write(bAppOnly, 3);
            if (host != "")
            {
                _os.write(host, 4);
            }
            if (setdivision != "")
            {
                _os.write(setdivision, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(filename, 2, true);
            _is.read(bAppOnly, 3, true);
            _is.read(host, 4, false);
            _is.read(setdivision, 5, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["appname"] = tars::JsonOutput::writeJson(appname);
            p->value["servername"] = tars::JsonOutput::writeJson(servername);
            p->value["filename"] = tars::JsonOutput::writeJson(filename);
            p->value["bAppOnly"] = tars::JsonOutput::writeJson(bAppOnly);
            p->value["host"] = tars::JsonOutput::writeJson(host);
            p->value["setdivision"] = tars::JsonOutput::writeJson(setdivision);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(appname,pObj->value["appname"], true);
            tars::JsonInput::readJson(servername,pObj->value["servername"], true);
            tars::JsonInput::readJson(filename,pObj->value["filename"], true);
            tars::JsonInput::readJson(bAppOnly,pObj->value["bAppOnly"], true);
            tars::JsonInput::readJson(host,pObj->value["host"], false);
            tars::JsonInput::readJson(setdivision,pObj->value["setdivision"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(filename,"filename");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(filename, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string filename;
        tars::Bool bAppOnly;
        std::string host;
        std::string setdivision;
    };
    inline bool operator==(const ConfigInfo&l, const ConfigInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.filename == r.filename && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision;
    }
    inline bool operator!=(const ConfigInfo&l, const ConfigInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ConfigInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ConfigInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GetConfigListInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.GetConfigListInfo";
        }
        static string MD5()
        {
            return "d3a0899b1f400183661be8f0b44568f6";
        }
        GetConfigListInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
            containername = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            if (servername != "")
            {
                _os.write(servername, 1);
            }
            //bool类型, 都传输, 为了兼容调整bool缺省值的带来的问题
            {
                _os.write(bAppOnly, 2);
            }
            if (host != "")
            {
                _os.write(host, 3);
            }
            if (setdivision != "")
            {
                _os.write(setdivision, 4);
            }
            if (containername != "")
            {
                _os.write(containername, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, false);
            _is.read(bAppOnly, 2, false);
            _is.read(host, 3, false);
            _is.read(setdivision, 4, false);
            _is.read(containername, 5, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["appname"] = tars::JsonOutput::writeJson(appname);
            p->value["servername"] = tars::JsonOutput::writeJson(servername);
            p->value["bAppOnly"] = tars::JsonOutput::writeJson(bAppOnly);
            p->value["host"] = tars::JsonOutput::writeJson(host);
            p->value["setdivision"] = tars::JsonOutput::writeJson(setdivision);
            p->value["containername"] = tars::JsonOutput::writeJson(containername);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(appname,pObj->value["appname"], true);
            tars::JsonInput::readJson(servername,pObj->value["servername"], false);
            tars::JsonInput::readJson(bAppOnly,pObj->value["bAppOnly"], false);
            tars::JsonInput::readJson(host,pObj->value["host"], false);
            tars::JsonInput::readJson(setdivision,pObj->value["setdivision"], false);
            tars::JsonInput::readJson(containername,pObj->value["containername"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            _ds.display(containername,"containername");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(containername, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        tars::Bool bAppOnly;
        std::string host;
        std::string setdivision;
        std::string containername;
    };
    inline bool operator==(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision && l.containername == r.containername;
    }
    inline bool operator!=(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetConfigListInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetConfigListInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class ConfigPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallback(){}
        virtual void callback_ListAllConfigByInfo(tars::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListAllConfigByInfo() override incorrect."); }
        virtual void callback_ListAllConfigByInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_ListAllConfigByInfo_exception() override incorrect."); }
        virtual void callback_ListAllConfigByInfo(tars::Int32 ret, vector<std::string>&&  vf)
        { callback_ListAllConfigByInfo(ret, vf); }

        virtual void callback_ListConfig(tars::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfig() override incorrect."); }
        virtual void callback_ListConfig_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_ListConfig_exception() override incorrect."); }
        virtual void callback_ListConfig(tars::Int32 ret, vector<std::string>&&  vf)
        { callback_ListConfig(ret, vf); }

        virtual void callback_ListConfigByInfo(tars::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfigByInfo() override incorrect."); }
        virtual void callback_ListConfigByInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_ListConfigByInfo_exception() override incorrect."); }
        virtual void callback_ListConfigByInfo(tars::Int32 ret, vector<std::string>&&  vf)
        { callback_ListConfigByInfo(ret, vf); }

        virtual void callback_checkConfig(tars::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfig() override incorrect."); }
        virtual void callback_checkConfig_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_checkConfig_exception() override incorrect."); }
        virtual void callback_checkConfig(tars::Int32 ret, std::string&&  result)
        { callback_checkConfig(ret, result); }

        virtual void callback_checkConfigByInfo(tars::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfigByInfo() override incorrect."); }
        virtual void callback_checkConfigByInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_checkConfigByInfo_exception() override incorrect."); }
        virtual void callback_checkConfigByInfo(tars::Int32 ret, std::string&&  result)
        { callback_checkConfigByInfo(ret, result); }

        virtual void callback_loadConfig(tars::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfig() override incorrect."); }
        virtual void callback_loadConfig_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_loadConfig_exception() override incorrect."); }
        virtual void callback_loadConfig(tars::Int32 ret, std::string&&  config)
        { callback_loadConfig(ret, config); }

        virtual void callback_loadConfigByHost(tars::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByHost() override incorrect."); }
        virtual void callback_loadConfigByHost_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByHost_exception() override incorrect."); }
        virtual void callback_loadConfigByHost(tars::Int32 ret, std::string&&  config)
        { callback_loadConfigByHost(ret, config); }

        virtual void callback_loadConfigByInfo(tars::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByInfo() override incorrect."); }
        virtual void callback_loadConfigByInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByInfo_exception() override incorrect."); }
        virtual void callback_loadConfigByInfo(tars::Int32 ret, std::string&&  config)
        { callback_loadConfigByInfo(ret, config); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };
            auto it = _msg_->response->status.find("TARS_FUNC");
            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, (it==_msg_->response->status.end())?_msg_->request.sFuncName:it->second);
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 2, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "ListAllConfigByInfo", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_ListAllConfigByInfo(_ret, std::move(vf));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "ListConfig", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_ListConfig(_ret, std::move(vf));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 2, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "ListConfigByInfo", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_ListConfigByInfo(_ret, std::move(vf));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 4, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["result"] = tars::JsonOutput::writeJson(result);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "checkConfig", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_checkConfig(_ret, std::move(result));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 2, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["result"] = tars::JsonOutput::writeJson(result);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "checkConfigByInfo", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_checkConfigByInfo(_ret, std::move(result));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 4, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["config"] = tars::JsonOutput::writeJson(config);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "loadConfig", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_loadConfig(_ret, std::move(config));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 4, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["config"] = tars::JsonOutput::writeJson(config);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "loadConfigByHost", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_loadConfigByHost(_ret, std::move(config));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 2, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["config"] = tars::JsonOutput::writeJson(config);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", getModuleName(), "loadConfigByInfo", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_loadConfigByInfo(_ret, std::move(config));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<ConfigPrxCallback> ConfigPrxCallbackPtr;

    //callback of promise async proxy for client
    class ConfigPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallbackPromise(){}
    public:
        struct PromiseListAllConfigByInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListAllConfigByInfo > PromiseListAllConfigByInfoPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > &promise)
        : _promise_ListAllConfigByInfo(promise)
        {}
        
        virtual void callback_ListAllConfigByInfo(const ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr &ptr)
        {
            _promise_ListAllConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListAllConfigByInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:ListAllConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListAllConfigByInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > _promise_ListAllConfigByInfo;

    public:
        struct PromiseListConfig: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListConfig > PromiseListConfigPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > &promise)
        : _promise_ListConfig(promise)
        {}
        
        virtual void callback_ListConfig(const ConfigPrxCallbackPromise::PromiseListConfigPtr &ptr)
        {
            _promise_ListConfig.setValue(ptr);
        }
        virtual void callback_ListConfig_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListConfig.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > _promise_ListConfig;

    public:
        struct PromiseListConfigByInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListConfigByInfo > PromiseListConfigByInfoPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > &promise)
        : _promise_ListConfigByInfo(promise)
        {}
        
        virtual void callback_ListConfigByInfo(const ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr &ptr)
        {
            _promise_ListConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListConfigByInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListConfigByInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > _promise_ListConfigByInfo;

    public:
        struct PromisecheckConfig: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromisecheckConfig > PromisecheckConfigPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > &promise)
        : _promise_checkConfig(promise)
        {}
        
        virtual void callback_checkConfig(const ConfigPrxCallbackPromise::PromisecheckConfigPtr &ptr)
        {
            _promise_checkConfig.setValue(ptr);
        }
        virtual void callback_checkConfig_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkConfig.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > _promise_checkConfig;

    public:
        struct PromisecheckConfigByInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromisecheckConfigByInfo > PromisecheckConfigByInfoPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > &promise)
        : _promise_checkConfigByInfo(promise)
        {}
        
        virtual void callback_checkConfigByInfo(const ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr &ptr)
        {
            _promise_checkConfigByInfo.setValue(ptr);
        }
        virtual void callback_checkConfigByInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkConfigByInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > _promise_checkConfigByInfo;

    public:
        struct PromiseloadConfig: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfig > PromiseloadConfigPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > &promise)
        : _promise_loadConfig(promise)
        {}
        
        virtual void callback_loadConfig(const ConfigPrxCallbackPromise::PromiseloadConfigPtr &ptr)
        {
            _promise_loadConfig.setValue(ptr);
        }
        virtual void callback_loadConfig_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfig.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > _promise_loadConfig;

    public:
        struct PromiseloadConfigByHost: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfigByHost > PromiseloadConfigByHostPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > &promise)
        : _promise_loadConfigByHost(promise)
        {}
        
        virtual void callback_loadConfigByHost(const ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr &ptr)
        {
            _promise_loadConfigByHost.setValue(ptr);
        }
        virtual void callback_loadConfigByHost_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByHost_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfigByHost.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > _promise_loadConfigByHost;

    public:
        struct PromiseloadConfigByInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfigByInfo > PromiseloadConfigByInfoPtr;

        ConfigPrxCallbackPromise(const tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > &promise)
        : _promise_loadConfigByInfo(promise)
        {}
        
        virtual void callback_loadConfigByInfo(const ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr &ptr)
        {
            _promise_loadConfigByInfo.setValue(ptr);
        }
        virtual void callback_loadConfigByInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfigByInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > _promise_loadConfigByInfo;

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr ptr (new ConfigPrxCallbackPromise::PromiseListAllConfigByInfo());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListAllConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListAllConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_ListAllConfigByInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListConfigPtr ptr (new ConfigPrxCallbackPromise::PromiseListConfig());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_ListConfig(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr ptr (new ConfigPrxCallbackPromise::PromiseListConfigByInfo());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_ListConfigByInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromisecheckConfigPtr ptr (new ConfigPrxCallbackPromise::PromisecheckConfig());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_checkConfig(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr ptr (new ConfigPrxCallbackPromise::PromisecheckConfigByInfo());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_checkConfigByInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigPtr ptr (new ConfigPrxCallbackPromise::PromiseloadConfig());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_loadConfig(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr ptr (new ConfigPrxCallbackPromise::PromiseloadConfigByHost());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByHost_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByHost_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_loadConfigByHost(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr ptr (new ConfigPrxCallbackPromise::PromiseloadConfigByInfo());

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_loadConfigByInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<ConfigPrxCallbackPromise> ConfigPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ConfigCoroPrxCallback: public ConfigPrxCallback
    {
    public:
        virtual ~ConfigCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_ListAllConfigByInfo(_ret, std::move(vf));

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListAllConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListAllConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_ListConfig(_ret, std::move(vf));

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_ListConfigByInfo(_ret, std::move(vf));

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 4, true);
                        setResponseContext(_msg_->response->context);

                        callback_checkConfig(_ret, std::move(result));

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_checkConfigByInfo(_ret, std::move(result));

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 4, true);
                        setResponseContext(_msg_->response->context);

                        callback_loadConfig(_ret, std::move(config));

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfig_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 4, true);
                        setResponseContext(_msg_->response->context);

                        callback_loadConfigByHost(_ret, std::move(config));

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByHost_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByHost_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 2, true);
                        setResponseContext(_msg_->response->context);

                        callback_loadConfigByInfo(_ret, std::move(config));

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<ConfigCoroPrxCallback> ConfigCoroPrxCallbackPtr;

    /* proxy for client */
    class ConfigProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 ListAllConfigByInfo(const tars::GetConfigListInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(vf, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListAllConfigByInfo", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"ListAllConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 2, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "ListAllConfigByInfo", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_ListAllConfigByInfo(ConfigPrxCallbackPtr callback,const tars::GetConfigListInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListAllConfigByInfo", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise_async_ListAllConfigByInfo(const tars::GetConfigListInfo &configInfo,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListAllConfigByInfo(ConfigCoroPrxCallbackPtr callback,const tars::GetConfigListInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback, true);
        }

        tars::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(vf, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["app"] = tars::JsonOutput::writeJson(app);
                    _p_->value["server"] = tars::JsonOutput::writeJson(server);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListConfig", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"ListConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "ListConfig", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_ListConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["app"] = tars::JsonOutput::writeJson(app);
                    _p_->value["server"] = tars::JsonOutput::writeJson(server);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListConfig", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"ListConfig", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise_async_ListConfig(const std::string &app,const std::string &server,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListConfig", _os, context, _mStatus, callback, true);
        }

        tars::Int32 ListConfigByInfo(const tars::ConfigInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(vf, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListConfigByInfo", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"ListConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 2, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "ListConfigByInfo", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_ListConfigByInfo(ConfigPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "ListConfigByInfo", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise_async_ListConfigByInfo(const tars::ConfigInfo &configInfo,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListConfigByInfo(ConfigCoroPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback, true);
        }

        tars::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            _os.write(result, 4);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _p_->value["host"] = tars::JsonOutput::writeJson(host);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "checkConfig", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"checkConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 4, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["result"] = tars::JsonOutput::writeJson(result);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "checkConfig", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_checkConfig(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _p_->value["host"] = tars::JsonOutput::writeJson(host);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "checkConfig", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"checkConfig", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise_async_checkConfig(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkConfig(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkConfig", _os, context, _mStatus, callback, true);
        }

        tars::Int32 checkConfigByInfo(const tars::ConfigInfo & configInfo,std::string &result,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(result, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "checkConfigByInfo", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"checkConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 2, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["result"] = tars::JsonOutput::writeJson(result);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "checkConfigByInfo", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_checkConfigByInfo(ConfigPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "checkConfigByInfo", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise_async_checkConfigByInfo(const tars::ConfigInfo &configInfo,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkConfigByInfo(ConfigCoroPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback, true);
        }

        tars::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            _os.write(config, 4);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["app"] = tars::JsonOutput::writeJson(app);
                    _p_->value["server"] = tars::JsonOutput::writeJson(server);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfig", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"loadConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 4, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "loadConfig", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_loadConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["app"] = tars::JsonOutput::writeJson(app);
                    _p_->value["server"] = tars::JsonOutput::writeJson(server);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfig", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"loadConfig", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise_async_loadConfig(const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfig", _os, context, _mStatus, callback, true);
        }

        tars::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            _os.write(config, 4);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _p_->value["host"] = tars::JsonOutput::writeJson(host);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfigByHost", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"loadConfigByHost", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 4, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "loadConfigByHost", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_loadConfigByHost(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                    _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                    _p_->value["host"] = tars::JsonOutput::writeJson(host);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfigByHost", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByHost", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise_async_loadConfigByHost(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByHost", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfigByHost(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByHost", _os, context, _mStatus, callback, true);
        }

        tars::Int32 loadConfigByInfo(const tars::ConfigInfo & configInfo,std::string &config,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(config, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfigByInfo", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"loadConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 2, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, tars_moduleName(), tars_name(), "loadConfigByInfo", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_loadConfigByInfo(ConfigPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, tars_moduleName(), tars_name(), "loadConfigByInfo", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise_async_loadConfigByInfo(const tars::ConfigInfo &configInfo,const map<string, string>& context)
        {
            tars::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback (new ConfigPrxCallbackPromise(promise));

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfigByInfo(ConfigCoroPrxCallbackPtr callback,const tars::ConfigInfo &configInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback, true);
        }

        ConfigProxy* tars_hash(size_t key)
        {
            return (ConfigProxy*)ServantProxy::tars_hash(key);
        }

        ConfigProxy* tars_consistent_hash(size_t key)
        {
            return (ConfigProxy*)ServantProxy::tars_consistent_hash(key);
        }

        ConfigProxy* tars_open_trace(bool traceParam = false)
        {
            return (ConfigProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        ConfigProxy* tars_set_timeout(int msecond)
        {
            return (ConfigProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "ConfigProxy"; }
    };
    typedef tars::TC_AutoPtr<ConfigProxy> ConfigPrx;

    /* servant for server */
    class Config : public tars::Servant
    {
    public:
        virtual ~Config(){}
        virtual tars::Int32 ListAllConfigByInfo(const tars::GetConfigListInfo & configInfo,vector<std::string> &vf,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 ListAllConfigByInfo(tars::GetConfigListInfo && configInfo,vector<std::string> &vf,tars::TarsCurrentPtr _current_) 
        { return ListAllConfigByInfo(configInfo, vf, _current_); }
        static void async_response_ListAllConfigByInfo(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("vf", vf);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "ListAllConfigByInfo", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_ListAllConfigByInfo(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"ListAllConfigByInfo", _os, _context);
            }
        }

        virtual tars::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 ListConfig(std::string && app,std::string && server,vector<std::string> &vf,tars::TarsCurrentPtr _current_) 
        { return ListConfig(app, server, vf, _current_); }
        static void async_response_ListConfig(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("vf", vf);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "ListConfig", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_ListConfig(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"ListConfig", _os, _context);
            }
        }

        virtual tars::Int32 ListConfigByInfo(const tars::ConfigInfo & configInfo,vector<std::string> &vf,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 ListConfigByInfo(tars::ConfigInfo && configInfo,vector<std::string> &vf,tars::TarsCurrentPtr _current_) 
        { return ListConfigByInfo(configInfo, vf, _current_); }
        static void async_response_ListConfigByInfo(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("vf", vf);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "ListConfigByInfo", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_ListConfigByInfo(tars::CurrentPtr _current_, tars::Int32 _ret, const vector<std::string> &vf, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"ListConfigByInfo", _os, _context);
            }
        }

        virtual tars::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 checkConfig(std::string && appServerName,std::string && filename,std::string && host,std::string &result,tars::TarsCurrentPtr _current_) 
        { return checkConfig(appServerName, filename, host, result, _current_); }
        static void async_response_checkConfig(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &result)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("result", result);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["result"] = tars::JsonOutput::writeJson(result);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["result"] = tars::JsonOutput::writeJson(result);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "checkConfig", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_checkConfig(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &result, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"checkConfig", _os, _context);
            }
        }

        virtual tars::Int32 checkConfigByInfo(const tars::ConfigInfo & configInfo,std::string &result,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 checkConfigByInfo(tars::ConfigInfo && configInfo,std::string &result,tars::TarsCurrentPtr _current_) 
        { return checkConfigByInfo(configInfo, result, _current_); }
        static void async_response_checkConfigByInfo(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &result)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("result", result);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["result"] = tars::JsonOutput::writeJson(result);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 2);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["result"] = tars::JsonOutput::writeJson(result);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "checkConfigByInfo", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_checkConfigByInfo(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &result, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"checkConfigByInfo", _os, _context);
            }
        }

        virtual tars::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 loadConfig(std::string && app,std::string && server,std::string && filename,std::string &config,tars::TarsCurrentPtr _current_) 
        { return loadConfig(app, server, filename, config, _current_); }
        static void async_response_loadConfig(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &config)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("config", config);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["config"] = tars::JsonOutput::writeJson(config);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "loadConfig", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_loadConfig(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &config, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"loadConfig", _os, _context);
            }
        }

        virtual tars::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 loadConfigByHost(std::string && appServerName,std::string && filename,std::string && host,std::string &config,tars::TarsCurrentPtr _current_) 
        { return loadConfigByHost(appServerName, filename, host, config, _current_); }
        static void async_response_loadConfigByHost(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &config)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("config", config);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["config"] = tars::JsonOutput::writeJson(config);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "loadConfigByHost", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_loadConfigByHost(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &config, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"loadConfigByHost", _os, _context);
            }
        }

        virtual tars::Int32 loadConfigByInfo(const tars::ConfigInfo & configInfo,std::string &config,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 loadConfigByInfo(tars::ConfigInfo && configInfo,std::string &config,tars::TarsCurrentPtr _current_) 
        { return loadConfigByInfo(configInfo, config, _current_); }
        static void async_response_loadConfigByInfo(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const std::string &config)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("config", config);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _tarsAttr_);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["config"] = tars::JsonOutput::writeJson(config);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 2);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["config"] = tars::JsonOutput::writeJson(config);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                if(_current_->getServantHandle())
                {
                    TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", _current_->getModuleName(), "loadConfigByInfo", 0, _trace_param_, "");
                }
            }

        }
        static void async_response_push_loadConfigByInfo(tars::CurrentPtr _current_, tars::Int32 _ret, const std::string &config, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 2);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"loadConfigByInfo", _os, _context);
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__tars__Config_all, __tars__Config_all+8, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Config_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::GetConfigListInfo configInfo;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("configInfo", configInfo);
                        _tarsAttr_.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        tars::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(vf, 2, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "ListAllConfigByInfo", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = ListAllConfigByInfo(std::move(configInfo),vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("vf", vf);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "ListAllConfigByInfo", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string server;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("app", app);
                        _tarsAttr_.get("server", server);
                        _tarsAttr_.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(server, _jsonPtr->value["server"], true);
                        tars::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(server, 2, true);
                        _is.read(vf, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["app"] = tars::JsonOutput::writeJson(app);
                            _p_->value["server"] = tars::JsonOutput::writeJson(server);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "ListConfig", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = ListConfig(std::move(app),std::move(server),vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("vf", vf);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "ListConfig", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ConfigInfo configInfo;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("configInfo", configInfo);
                        _tarsAttr_.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        tars::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(vf, 2, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "ListConfigByInfo", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = ListConfigByInfo(std::move(configInfo),vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("vf", vf);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["vf"] = tars::JsonOutput::writeJson(vf);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["vf"] = tars::JsonOutput::writeJson(vf);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "ListConfigByInfo", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string appServerName;
                    std::string filename;
                    std::string host;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("appServerName", appServerName);
                        _tarsAttr_.get("filename", filename);
                        _tarsAttr_.get("host", host);
                        _tarsAttr_.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(appServerName, _jsonPtr->value["appServerName"], true);
                        tars::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        tars::JsonInput::readJson(host, _jsonPtr->value["host"], true);
                        tars::JsonInput::readJson(result, _jsonPtr->value["result"], false);
                    }
                    else
                    {
                        _is.read(appServerName, 1, true);
                        _is.read(filename, 2, true);
                        _is.read(host, 3, true);
                        _is.read(result, 4, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                            _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                            _p_->value["host"] = tars::JsonOutput::writeJson(host);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "checkConfig", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = checkConfig(std::move(appServerName),std::move(filename),std::move(host),result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("result", result);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["result"] = tars::JsonOutput::writeJson(result);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 4);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["result"] = tars::JsonOutput::writeJson(result);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "checkConfig", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ConfigInfo configInfo;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("configInfo", configInfo);
                        _tarsAttr_.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        tars::JsonInput::readJson(result, _jsonPtr->value["result"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(result, 2, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "checkConfigByInfo", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = checkConfigByInfo(std::move(configInfo),result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("result", result);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["result"] = tars::JsonOutput::writeJson(result);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["result"] = tars::JsonOutput::writeJson(result);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "checkConfigByInfo", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string server;
                    std::string filename;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("app", app);
                        _tarsAttr_.get("server", server);
                        _tarsAttr_.get("filename", filename);
                        _tarsAttr_.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(server, _jsonPtr->value["server"], true);
                        tars::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        tars::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(server, 2, true);
                        _is.read(filename, 3, true);
                        _is.read(config, 4, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["app"] = tars::JsonOutput::writeJson(app);
                            _p_->value["server"] = tars::JsonOutput::writeJson(server);
                            _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "loadConfig", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = loadConfig(std::move(app),std::move(server),std::move(filename),config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("config", config);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["config"] = tars::JsonOutput::writeJson(config);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 4);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["config"] = tars::JsonOutput::writeJson(config);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "loadConfig", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string appServerName;
                    std::string filename;
                    std::string host;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("appServerName", appServerName);
                        _tarsAttr_.get("filename", filename);
                        _tarsAttr_.get("host", host);
                        _tarsAttr_.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(appServerName, _jsonPtr->value["appServerName"], true);
                        tars::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        tars::JsonInput::readJson(host, _jsonPtr->value["host"], true);
                        tars::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(appServerName, 1, true);
                        _is.read(filename, 2, true);
                        _is.read(host, 3, true);
                        _is.read(config, 4, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["appServerName"] = tars::JsonOutput::writeJson(appServerName);
                            _p_->value["filename"] = tars::JsonOutput::writeJson(filename);
                            _p_->value["host"] = tars::JsonOutput::writeJson(host);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "loadConfigByHost", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = loadConfigByHost(std::move(appServerName),std::move(filename),std::move(host),config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("config", config);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["config"] = tars::JsonOutput::writeJson(config);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 4);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["config"] = tars::JsonOutput::writeJson(config);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "loadConfigByHost", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ConfigInfo configInfo;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("configInfo", configInfo);
                        _tarsAttr_.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        tars::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(config, 2, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["configInfo"] = tars::JsonOutput::writeJson(configInfo);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", getModuleName(), "loadConfigByInfo", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = loadConfigByInfo(std::move(configInfo),config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("config", config);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["config"] = tars::JsonOutput::writeJson(config);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["config"] = tars::JsonOutput::writeJson(config);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", getModuleName(), "loadConfigByInfo", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
